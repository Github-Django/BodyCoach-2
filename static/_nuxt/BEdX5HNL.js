import{F,U as a,ay as O,s as U,az as $,aA as x}from"./BcqZkZus.js";function T(s,n,u){const[e={},r]=typeof n=="string"?[{},n]:[n,u],t=F(()=>a(s)),o=e.key||O([r,typeof t.value=="string"?t.value:"",...A(e)]);if(!o||typeof o!="string")throw new TypeError("[nuxt] [useFetch] key must be a string: "+o);if(!s)throw new Error("[nuxt] [useFetch] request is missing.");const l=o===r?"$f"+o:o;if(!e.baseURL&&typeof t.value=="string"&&t.value[0]==="/"&&t.value[1]==="/")throw new Error('[nuxt] [useFetch] the request URL must not start with "//".');const{server:p,lazy:y,default:m,transform:d,pick:b,watch:i,immediate:g,getCachedData:w,deep:v,dedupe:_,...k}=e,f=U({...$,...k,cache:typeof e.cache=="boolean"?void 0:e.cache}),D={server:p,lazy:y,default:m,transform:d,pick:b,immediate:g,getCachedData:w,deep:v,dedupe:_,watch:i===!1?[]:[f,t,...i||[]]};let c;return x(l,()=>{c?.abort?.(),c=typeof AbortController<"u"?new AbortController:{};const h=a(e.timeout);return h&&setTimeout(()=>c.abort(),h),(e.$fetch||globalThis.$fetch)(t.value,{signal:c.signal,...f})},D)}function A(s){const n=[a(s.method)?.toUpperCase()||"GET",a(s.baseURL)];for(const u of[s.params||s.query]){const e=a(u);if(!e)continue;const r={};for(const[t,o]of Object.entries(e))r[a(t)]=a(o);n.push(r)}return n}export{T as u};
