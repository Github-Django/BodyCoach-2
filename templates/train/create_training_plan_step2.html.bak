<!DOCTYPE html>
{% extends 'home/base.html' %}
{% block subject %}ایجاد برنامه تمرینی{% endblock %}
{% block title %}ایجاد برنامه تمرینی{% endblock %}
{% load static %}
{% load train_tags %}
{% block main %}
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet"/>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
    {#    <link rel="stylesheet" href="{% static 'css/train-planing.css' %}">#}
    <link rel="stylesheet" href="{% static 'css/step2.css' %}">
    <link rel="stylesheet" href="{% static 'css/modal.css' %}">
    <link rel="stylesheet" href="{% static 'css/notification.css' %}">

    {% if messages %}
        <div class="alert-container">
            {% for message in messages %}
                {% if message.tags == 'success' %}
                    <div class="alert alert-gradient">
                        <div class="alert-icon">✓</div>
                        <h3 class="alert-message nui-heading nui-heading-sm nui-weight-medium nui-lead-normal text-white">
                            {{ message }}
                        </h3>
                        <button class="alert-close">✕</button>
                    </div>
                {% elif message.tags == 'error' %}
                    <div class="alert alert-filled">
                        <div class="alert-icon">✕</div>
                        <h3 class="alert-message nui-heading nui-heading-sm nui-weight-medium nui-lead-normal text-white">
                            {{ message }}
                        </h3>
                        <button class="alert-close">✕</button>
                    </div>
                {% elif message.tags == 'warning' %}
                    <div class="alert alert-with-icon">
                        <div class="alert-icon">!</div>
                        <h3 class="alert-message nui-heading nui-heading-sm nui-weight-medium nui-lead-normal text-white">
                            {{ message }}
                        </h3>
                        <button class="alert-close">✕</button>
                    </div>
                {% else %}
                    <div class="alert alert-filled">
                        <div class="alert-icon">i</div>
                        <h3 class="alert-message nui-heading nui-heading-sm nui-weight-medium nui-lead-normal text-white">
                            {{ message }}
                        </h3>
                        <button class="alert-close">✕</button>
                    </div>
                {% endif %}
            {% endfor %}
        </div>
    {% endif %}
    <div class="max-w-6xl mx-auto px-4">
        <!-- کارت اطلاعات ورزشکار -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
            <!-- هدر با اطلاعات اصلی -->
            <div class="flex items-center gap-4 p-4 border-b">
                <div class="flex-shrink-0 w-12 h-12 bg-violet-500 rounded-lg flex items-center justify-center">
                    <span class="text-xl font-bold text-white">{{ athlete_profile.full_name|slice:":1" }}</span>
                </div>
                <div class="flex-grow">
                    <div class="flex items-center gap-2">
                        <h2 class="text-lg font-bold">{{ athlete_profile.full_name }}</h2>
                        <span class="text-sm text-gray-500">(کد {{ athlete_profile.unique_code }})</span>
                    </div>
                    <div class="flex items-center gap-4 text-sm text-gray-600 mt-1">
                        <span>{{ athlete_profile.age }} سال</span>
                        <span>{{ athlete_profile.height|floatformat:"-0" }} سانتی‌متر</span>
                        <span>{{ athlete_profile.weight|floatformat:"-0" }} کیلوگرم</span>
                        <span dir="ltr">{{ athlete_profile.mobile_phone|slice:"3:"|default:"-"|add:"0" }}</span>
                        {% if athlete_profile.telegram_whatsapp_phone %}
                            <span dir="ltr" class="text-blue-600">واتساپ/تلگرام: {{ athlete_profile.telegram_whatsapp_phone }}</span>
                        {% endif %}
                </div>
            </div>
        </div>

            <!-- اطلاعات تکمیلی -->
            <div class="grid grid-cols-4 gap-4 p-4">
                <div class="flex items-center gap-2">
                    <div class="w-2 h-2 rounded-full bg-violet-500"></div>
                    <span class="text-sm">سابقه تمرین: <span class="font-medium">{{ athlete_profile.training_history|default:"ندارد" }}</span></span>
                </div>
                <div class="flex items-center gap-2">
                    <div class="w-2 h-2 rounded-full {% if athlete_profile.injuries %}bg-red-500{% else %}bg-green-500{% endif %}"></div>
                    <span class="text-sm">آسیب‌دیدگی: <span class="font-medium">{{ athlete_profile.injuries|default:"ندارد" }}</span></span>
                </div>
                <div class="flex items-center gap-2">
                    <div class="w-2 h-2 rounded-full bg-blue-500"></div>
                    <span class="text-sm">مکمل‌ها: <span class="font-medium">{{ athlete_profile.supplements|default:"ندارد" }}</span></span>
                </div>
                <div class="flex items-center gap-2">
                    <div class="w-2 h-2 rounded-full bg-emerald-500"></div>
                    <span class="text-sm">هدف: <span class="font-medium">{{ athlete_profile.get_motivation_goal_display|default:"-" }}</span></span>
                </div>
                {% if athlete_profile.gym_name %}
                <div class="flex items-center gap-2">
                    <div class="w-2 h-2 rounded-full bg-purple-500"></div>
                    <span class="text-sm">نام باشگاه: <span class="font-medium">{{ athlete_profile.gym_name }}</span></span>
                </div>
                {% endif %}
                {% if athlete_profile.referrer %}
                <div class="flex items-center gap-2">
                    <div class="w-2 h-2 rounded-full bg-pink-500"></div>
                    <span class="text-sm">معرف: <span class="font-medium">{{ athlete_profile.referrer }}</span></span>
                </div>
                {% endif %}
                        {% if athlete_profile.body_test_file %}
                <div class="flex items-center gap-2 col-span-4">
                    <div class="w-2 h-2 rounded-full bg-yellow-500"></div>
                    <span class="text-sm">فایل تست بادی: <a href="{{ athlete_profile.body_test_file.url }}" class="text-blue-600 hover:underline" target="_blank">مشاهده فایل</a></span>
                </div>
                        {% endif %}
            </div>
        </div>
    </div>
    <br/>
    <div>
        <div class="pb-20">
            <div class="grid grid-cols-12 gap-6">
                <div class="ltablet:col-span-8 col-span-12 lg:col-span-8">
                    <div class="flex flex-col gap-6">
                        <div class="container mx-auto px-4 py-8">


                            <form method="post" id="training-plan-form">
                                {% csrf_token %}
                                {{ formset.management_form }}

                                <div class="space-y-6">
                                    {% for session_num in num_sessions %}
                                        <div class="session-container p-6 bg-white rounded-xl shadow-sm border border-gray-100">
                                            <div class="flex justify-between items-center mb-6 border-b pb-4">
                                                <h2 class="nui-heading nui-heading-xl nui-weight-medium nui-lead-normal text-muted-800 dark:text-muted-100">
                                                    جلسه {{ session_num }}</h2>
                                                <button type="button"
                                                        class="add-movement-btn flex items-center gap-2 px-6 py-3 bg-primary-500 hover:bg-primary-600 text-white rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl text-lg font-bold hover:scale-105 active:scale-95"
                                                        data-session="{{ session_num }}">
                                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                                    </svg>
                                                    افزودن حرکت
                                                </button>
                                            </div>

                                            <div id="exercises-list-{{ session_num }}" class="space-y-3">
                                                <!-- Exercises will be added here dynamically -->
                                            </div>
                                            
                                            <!-- Empty state with add button -->
                                            <div class="empty-state flex flex-col items-center justify-center py-8 opacity-60" 
                                                 id="empty-state-{{ session_num }}"
                                                 style="display: block;">
                                                <svg class="w-16 h-16 text-primary-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                                </svg>
                                                <p class="text-gray-500 text-lg mb-4">هنوز حرکتی اضافه نشده است</p>
                                                <button type="button"
                                                        class="add-movement-btn px-6 py-3 bg-primary-100 hover:bg-primary-200 text-primary-700 rounded-xl transition-all duration-200 text-lg font-bold flex items-center gap-2"
                                                        data-session="{{ session_num }}">
                                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                                    </svg>
                                                    افزودن اولین حرکت
                                                </button>
                                            </div>
                                        </div>
                                    {% endfor %}
                                </div>

                                <div class="mt-12 mb-8 flex justify-center">
                                    <button type="submit" id="save-training-plan-btn"
                                            class="px-12 py-6 text-2xl font-extrabold text-white bg-green-500 hover:bg-green-600 rounded-2xl shadow-2xl hover:shadow-3xl transition-all duration-300 hover:scale-105 active:scale-95 flex items-center gap-4 cursor-pointer focus:outline-none focus:ring-4 focus:ring-green-300"
                                            onclick="return validateAndSubmitForm()">
                                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M5 13l4 4L19 7" />
                                        </svg>
                                        ذخیره برنامه
                                    </button>
                                </div>
                            </form>

                            <!-- Exercise Selection Modal -->
                            <!-- Exercise Selection Modal -->
                            <div id="exercise-modal"
                                 class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                                <div class="bg-white rounded-lg w-[98vw] h-[98vh] mx-1 flex flex-col">
                                    <div class="flex justify-between items-center p-4 border-b">
                                        <h3 class="nui-heading nui-heading-md nui-weight-medium font-bold text-xl">جلسه <span id="modal-session-number" class="font-bold text-xl"></span></h3>
                                        <button id="close-modal" class="text-gray-500 hover:text-gray-700">
                                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                      d="M6 18L18 6M6 6l12 12"/>
                                            </svg>
                                        </button>
                                    </div>

                                    <!-- بخش نمایش حرکات انتخاب شده -->
                                    <div id="selected-exercises-container" class="border-b border-gray-200 p-3 bg-gray-50">
                                        <div class="flex justify-between items-center mb-2">
                                            <h4 class="text-md font-bold text-gray-700">حرکات انتخاب شده برای این جلسه</h4>
                                            <span id="selected-count" class="text-sm px-2 py-1 bg-primary-100 text-primary-700 rounded-full">0 حرکت</span>
                                        </div>
                                        <div id="selected-exercises-list" class="flex flex-wrap gap-3 min-h-[100px] max-h-[250px] overflow-y-auto p-3">
                                            <!-- حرکات انتخاب شده اینجا قرار می‌گیرند -->
                                            <div id="empty-selection-message" class="w-full flex items-center justify-center text-gray-400 italic">
                                                هنوز حرکتی انتخاب نشده است
                                            </div>
                                        </div>
                                    </div>

                                    <div class="flex flex-1 overflow-hidden">
                                        <!-- Main Content (Left Side - 70%) -->
                                        <div class="flex-grow flex flex-col w-9/12">
                                            <!-- Search Input -->
                                            <div class="p-4 border-b">
                                                <input type="text"
                                                       id="exercise-search"
                                                       class="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
                                                       placeholder="جستجوی حرکت..."
                                                       dir="rtl">
                                            </div>

                                            <!-- Exercise List -->
                                            <div class="flex-1 overflow-y-auto">
                                                <div class="p-4 bg-gray-50 border-b">
                                                    <div id="exercise-list"
                                                         class="mx-auto grid gap-4 sm:grid-cols-3"></div>
                                                </div>

                                                <!-- Categories Grid -->
                                                <div class="p-4">
                                                    <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
                                                        {% for category, subcategories in grouped_subcategories.items %}
                                                            <div class="bg-white p-4 rounded-lg shadow-sm">
                                                                <div class="flex flex-wrap gap-2">
                                                                    {% for subcategory in subcategories %}
                                                                        <button type="button"
                                                                                class="subcategory-btn w-full md:w-auto px-12 py-8 text-3xl font-extrabold bg-primary-50 hover:bg-primary-100 rounded-full transition-all duration-300 border-2 border-primary-200 hover:border-primary-300 text-primary-700 hover:text-primary-900 shadow-lg hover:shadow-xl hover:scale-105 active:scale-95 focus:outline-none focus:ring-4 focus:ring-primary-500 focus:ring-offset-2"
                                                                                data-subcategory="{{ subcategory.id }}">
                                                                            {{ subcategory.name }}
                                                                        </button>
                                                                    {% endfor %}
                                                                </div>
                                                            </div>
                                                        {% endfor %}
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Last Training Plan (Right Side - 30%) -->
                                        <div class="w-3/12 border-r border-gray-200 overflow-y-auto">
                                            <div class="nui-card nui-card-rounded-md nui-card-default p-6">
                                                <h3 class="nui-heading nui-heading-md nui-weight-medium nui-lead-normal">
                                                    آخرین برنامه تمرینی</h3>
                                                {% if last_plan_sessions %}
                                                    <p class="nui-text nui-content-sm nui-weight-medium nui-lead-none text-muted-400"
                                                       style="text-align: left">
                                                        تاریخ: {{ last_training_plan.jpublish }}
                                                    </p>
                                                    {% for session_number, exercises in last_plan_sessions.items %}
                                                        <div class="session">
                                                            <div class="session-header nui-heading nui-heading-md nui-weight-medium nui-lead-normal">
                                                                جلسه {{ session_number }}
                                                            </div>
                                                            <ul class="exercise-list">
                                                                {% for exercise_set in exercises %}
                                                                    <li class="nui-heading nui-heading-md nui-weight-medium nui-lead-normal exercise-item">
                                            <span>
                                                <span class="underline">{{ forloop.counter }}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                {{ exercise_set.exercise.name }}
                                                {% if exercise_set.is_superset and exercise_set.paired_exercise %}
                                                    <br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                    <span style="color: #e63946; font-weight: bold;"> + </span>&nbsp;
                                                    &nbsp;
                                                    {{ exercise_set.paired_exercise.name }}
                                                {% endif %}
                                                {% if exercise_set.paired_superset %}
                                                    <br/> <span style="color: #0077b6; font-weight: bold;"> + </span>
                                                    &nbsp;&nbsp;
                                                    {{ exercise_set.paired_superset.name }}
                                                {% endif %}
                                            </span>
                                                                        <span>{{ exercise_set.sets_reps }}</span>
                                                                    </li>
                                                                {% endfor %}
                                                            </ul>
                                                        </div>
                                                    {% endfor %}
                                                {% else %}
                                                    <p>هیچ برنامه تمرینی قبلی وجود ندارد.</p>
                                                {% endif %}
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Bottom Actions -->
                                    <div class="border-t p-4 bg-gray-50">
                                        <div class="flex justify-between items-center gap-4">
                                            <div class="flex items-center gap-4">
                                                <button type="button" id="make-triset" 
                                                        class="px-6 py-3 text-lg font-bold bg-purple-500 hover:bg-purple-600 text-white rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl hover:scale-105 active:scale-95 flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
                                                        title="سه حرکت آخر انتخاب شده را به صورت تری ست ثبت می‌کند"
                                                        disabled>
                                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                                    </svg>
                                                    ثبت تری ست
                                                </button>
                                                <button type="button" id="make-superset" 
                                                        class="px-6 py-3 text-lg font-bold bg-blue-500 hover:bg-blue-600 text-white rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl hover:scale-105 active:scale-95 flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
                                                        title="دو حرکت آخر انتخاب شده را به صورت سوپرست ثبت می‌کند"
                                                        disabled>
                                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                                    </svg>
                                                    ثبت سوپرست
                                                </button>
                                            </div>
                                            <div class="flex items-center gap-4">
                                                <button type="button" id="confirm-selection"
                                                        class="px-6 py-3 text-lg font-bold bg-primary-500 hover:bg-primary-600 text-white rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl hover:scale-105 active:scale-95 flex items-center gap-2">
                                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                                    </svg>
                                                    ثبت انتخاب‌ها
                                                </button>
                                                <button type="button" id="cancel-selection"
                                                        class="px-6 py-3 text-lg font-bold bg-red-500 hover:bg-red-600 text-white rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl hover:scale-105 active:scale-95 flex items-center gap-2">
                                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                                    </svg>
                                                    لغو انتخاب
                                                </button>
                                                <button type="button" id="finish-and-close"
                                                        class="px-6 py-3 text-lg font-bold bg-green-500 hover:bg-green-600 text-white rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl hover:scale-105 active:scale-95 flex items-center gap-2">
                                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                                    </svg>
                                                    اتمام و بستن
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <style>
                                /* Preserve the existing training plan styles */
                                .session {
                                    margin-bottom: 20px;
                                    background: white;
                                    border-radius: 8px;
                                    overflow: hidden;
                                }

                                .session-header {
                                    background: #f8f9fa;
                                    padding: 10px 15px;
                                    border-bottom: 1px solid #e9ecef;
                                    font-weight: bold;
                                }

                                .exercise-list {
                                    list-style: none;
                                    padding: 0;
                                    margin: 0;
                                }

                                .exercise-item {
                                    display: flex;
                                    justify-content: space-between;
                                    align-items: flex-start;
                                    padding: 12px 15px;
                                    border-bottom: 1px solid #e9ecef;
                                }

                                .exercise-item:last-child {
                                    border-bottom: none;
                                }

                                .exercise-item span {
                                    font-size: 0.9rem;
                                }

                                .line-clamp-2 {
                                    display: -webkit-box;
                                    -webkit-line-clamp: 2;
                                    -webkit-box-orient: vertical;
                                    overflow: hidden;
                                    text-overflow: ellipsis;
                                }

                                /* کانتینر اصلی */
                                .checkbox-container {
                                    display: flex;
                                    align-items: center;
                                    gap: 12px;
                                    padding: 8px;
                                    border-radius: 8px;
                                    transition: background-color 0.2s;
                                }

                                /* حالت انتخاب شده کل آیتم */
                                .checkbox-container.selected {
                                    background-color: rgba(79, 70, 229, 0.05);
                                }

                                /* برچسب متنی */
                                .checkbox-label {
                                    font-size: 16px;
                                    color: #1F2937;
                                    font-weight: 500;
                                }

                                /* نشانگر انتخاب */
                                .selection-indicator {
                                    opacity: 0;
                                    transition: opacity 0.2s;
                                }

                                .checkbox-container.selected .selection-indicator {
                                    opacity: 1;
                                }

                                .custom-checkbox {
                                    /* حالت پایه */
                                    position: relative;
                                    width: 24px;
                                    height: 24px;
                                    border: 2px solid #E2E8F0;
                                    border-radius: 6px;
                                    background-color: white;
                                    transition: all 0.2s ease-in-out;
                                    cursor: pointer;
                                    
                                    /* سایه ظریف برای عمق */
                                    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
                                }

                                /* حالت انتخاب شده */
                                .custom-checkbox.checked {
                                    border-color: #4F46E5;
                                    background-color: #4F46E5;
                                }

                                /* آیکون تیک */
                                .custom-checkbox.checked::after {
                                    content: '';
                                    position: absolute;
                                    top: 50%;
                                    left: 50%;
                                    transform: translate(-50%, -50%);
                                    width: 14px;
                                    height: 14px;
                                    background-image: url('path-to-checkmark.svg');
                                    opacity: 1;
                                }

                                /* انیمیشن هاور */
                                .custom-checkbox:hover {
                                    border-color: #4F46E5;
                                    transform: scale(1.05);
                                }

                                /* حالت فوکوس برای دسترسی‌پذیری */
                                .custom-checkbox:focus {
                                    outline: none;
                                    box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.3);
                                }
                            </style>
                        </div>
                    </div>
                </div>
                <div class="ltablet:col-span-4 col-span-12 lg:col-span-4">
                    <div class="flex flex-col gap-6">
                        <div class="nui-card nui-card-rounded-md nui-card-default p-6" elevated="">
                            <link rel="stylesheet" href="{% static 'css/train-planing.css' %}">

                            {% if last_plan_sessions %}
                                <h3 class="nui-heading nui-heading-md nui-weight-medium nui-lead-normal">آخرین برنامه
                                    تمرینی</h3>
                                <p class="nui-text nui-content-sm nui-weight-medium nui-lead-none text-muted-400"
                                   style="text-align: left">تاریخ: {{ last_training_plan.jpublish }}</p>
                                {% for session_number, exercises in last_plan_sessions.items %}
                                    <div class="session">
                                        <div class="session-header nui-heading nui-heading-md nui-weight-medium nui-lead-normal">
                                            جلسه {{ session_number }}</div>
                                        <ul class="exercise-list">
                                            {% for exercise_set in exercises %}
                                                <li class="nui-heading nui-heading-md nui-weight-medium nui-lead-normal exercise-item">
                        <span>
                            <span class="underline">{{ forloop.counter }}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            {{ exercise_set.exercise.name }}
                            {% if exercise_set.is_superset and exercise_set.paired_exercise %}
                                <br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                <span style="color: #e63946; font-weight: bold;"> + </span>&nbsp;&nbsp;
                                {{ exercise_set.paired_exercise.name }}
                            {% endif %}
                            {% if exercise_set.paired_superset %}
                                <br/> <span style="color: #0077b6; font-weight: bold;"> + </span>&nbsp;&nbsp;
                                {{ exercise_set.paired_superset.name }}
                            {% endif %}
                        </span>
                                            <span>{{ exercise_set.sets_reps }}</span>
                                        </li>
                                    {% endfor %}
                                </ul>
                            </div>
                        {% endfor %}
                            {% else %}
                                <p>هیچ برنامه تمرینی قبلی وجود ندارد.</p>
                            {% endif %}


                        </div>


                    </div>
                </div>

            </div>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Core state management
            let currentSession = null;
            let totalFormsCount = 0;
            let selectedExercises = []; // آرایه برای ذخیره ترتیب انتخاب‌ها
            let selectionOrder = []; // آرایه جدید برای ذخیره ترتیب انتخاب‌ها
            const modal = document.getElementById('exercise-modal');
            const exerciseList = document.getElementById('exercise-list');
            const totalFormsInput = document.querySelector('[name="exercise_set-TOTAL_FORMS"]');
            const searchInput = document.getElementById('exercise-search');
            
            // مدیریت حرکات انتخاب شده در هر جلسه
            let sessionExercisesMap = new Map(); // ذخیره‌سازی حرکات هر جلسه
            
            searchInput.addEventListener('input', function (e) {
                const searchTerm = e.target.value.toLowerCase();
                const exerciseElements = document.querySelectorAll('.exercise-checkbox');

                exerciseElements.forEach(checkbox => {
                    const exerciseDiv = checkbox.closest('label').parentElement;
                    const exerciseName = checkbox.dataset.name.toLowerCase();

                    if (exerciseName.includes(searchTerm)) {
                        exerciseDiv.style.display = '';
                    } else {
                        exerciseDiv.style.display = 'none';
                    }
                });
            });
            // Category mappings
            const MAIN_CATEGORY_NAMES = {
                'chest': 'سینه',
                'shoulders': 'سرشانه',
                'arms': 'بازوها',
                'back': 'پشت/زیربغل',
                'legs': 'پا',
                'core': 'شکم',
                'cardio': 'هوازی',
                'warmup_cooldown': 'گرم/سرد'
            };

            const SUBCATEGORY_NAMES = {
                'chest': 'سینه',
                'shoulders': 'سرشانه',
                'legs': 'پا',
                'core': 'شکم',
                'biceps': 'جلو بازو (Biceps)',
                'triceps': 'پشت بازو (Triceps)',
                'back': 'پشت/زیربغل (Back)',
                'cardio': 'هوازی (Cardio)',
                'warmup_cooldown': 'گرم/سرد (Warm-up/Cool-down)'
            };

            // Utility functions
            function getMainCategory(muscleGroup) {
                return muscleGroup; // Since we're using the same ID for both main and sub categories now
            }

            function getMainCategoryDisplayName(mainCategory) {
                return MAIN_CATEGORY_NAMES[mainCategory] || mainCategory;
            }

            function getSubcategoryDisplayName(subcategory) {
                return SUBCATEGORY_NAMES[subcategory] || subcategory;
            }
            
            // توابع مدیریت حرکات انتخاب شده
            function saveExercisesToSession() {
                // ذخیره حرکات جلسه فعلی
                if (!currentSession) return;
                
                const sessionExercisesList = document.getElementById(`exercises-list-${currentSession}`);
                if (!sessionExercisesList) return;
                
                // استخراج تمام حرکات از DOM
                const exerciseRows = sessionExercisesList.querySelectorAll('[id^="exercise-row-"]');
                const exercises = [];
                
                exerciseRows.forEach((row, index) => {
                    const exerciseInput = row.querySelector('[name$="-exercise"]');
                    const isPairedInput = row.querySelector('[name$="-is_superset"]');
                    const pairedExerciseInput = row.querySelector('[name$="-paired_exercise"]');
                    const pairedSupersetInput = row.querySelector('[name$="-paired_superset"]');
                    const nameElement = row.querySelector('.flex-grow.font-medium');
                    
                    if (!exerciseInput || !nameElement) return;
                    
                    const isSuperset = isPairedInput && isPairedInput.value === 'true';
                    const hasPairedSuperset = pairedSupersetInput && pairedSupersetInput.value;
                    
                    let exerciseType = 'regular';
                    if (isSuperset && hasPairedSuperset) {
                        exerciseType = 'triset';
                    } else if (isSuperset) {
                        exerciseType = 'superset';
                    }
                    
                    exercises.push({
                        id: exerciseInput.value,
                        name: nameElement.textContent.trim(),
                        type: exerciseType,
                        order: index + 1
                    });
                });
                
                // ذخیره در Map
                sessionExercisesMap.set(currentSession, exercises);
                
                // به‌روزرسانی نمایش
                updateSelectedExercisesDisplay();
            }
            
            function updateSelectedExercisesDisplay() {
                const selectedExercisesList = document.getElementById('selected-exercises-list');
                const selectedCountElement = document.getElementById('selected-count');
                const emptyMessage = document.getElementById('empty-selection-message');
                
                if (!selectedExercisesList || !currentSession) return;
                
                // دریافت حرکات جلسه فعلی
                const exercises = sessionExercisesMap.get(currentSession) || [];
                
                // به‌روزرسانی شمارنده
                if (selectedCountElement) {
                    selectedCountElement.textContent = `${exercises.length} حرکت`;
                }
                
                // بررسی خالی بودن لیست
                if (exercises.length === 0) {
                    if (emptyMessage) emptyMessage.style.display = 'flex';
                    selectedExercisesList.innerHTML = '';
                    selectedExercisesList.appendChild(emptyMessage);
                    return;
                }
                
                // مخفی کردن پیام خالی بودن
                if (emptyMessage) emptyMessage.style.display = 'none';
                
                // ساخت و نمایش بج‌های حرکات
                selectedExercisesList.innerHTML = '';
                exercises.forEach(exercise => {
                    // تعیین تیپ نمایشی حرکت
                    let displayType = 'عادی';
                    if (exercise.type === 'superset') {
                        displayType = 'سوپرست';
                    } else if (exercise.type === 'triset') {
                        displayType = 'تری‌ست';
                    }
                    
                    const badge = document.createElement('div');
                    badge.className = `exercise-badge ${exercise.type}`;
                    badge.title = `${exercise.name} (${displayType})`;
                    
                    badge.innerHTML = `
                        <span class="badge-number">${exercise.order}</span>
                        <span class="badge-text">${exercise.name}</span>
                    `;
                    
                    selectedExercisesList.appendChild(badge);
                });
            }
            
            function loadExercisesFromDOM() {
                // دریافت تمام حرکات از تمام جلسات
                sessionExercisesMap.clear();
                
                // بارگذاری حرکات از تمام جلسات
                const sessions = document.querySelectorAll('.session-container');
                sessions.forEach(sessionContainer => {
                    if (!sessionContainer) return;
                    
                    const sessionBtn = sessionContainer.querySelector('.add-movement-btn');
                    if (!sessionBtn) return;
                    
                    const sessionNumber = sessionBtn.dataset.session;
                    const exercisesList = document.getElementById(`exercises-list-${sessionNumber}`);
                    if (!exercisesList) return;
                    
                    const exerciseRows = exercisesList.querySelectorAll('[id^="exercise-row-"]');
                    const exercises = [];
                    
                    exerciseRows.forEach((row, index) => {
                        const exerciseInput = row.querySelector('[name$="-exercise"]');
                        const isPairedInput = row.querySelector('[name$="-is_superset"]');
                        const pairedExerciseInput = row.querySelector('[name$="-paired_exercise"]');
                        const pairedSupersetInput = row.querySelector('[name$="-paired_superset"]');
                        const nameElement = row.querySelector('.flex-grow.font-medium');
                        
                        if (!exerciseInput || !nameElement) return;
                        
                        const isSuperset = isPairedInput && isPairedInput.value === 'true';
                        const hasPairedSuperset = pairedSupersetInput && pairedSupersetInput.value;
                        
                        let exerciseType = 'regular';
                        if (isSuperset && hasPairedSuperset) {
                            exerciseType = 'triset';
                        } else if (isSuperset) {
                            exerciseType = 'superset';
                        }
                        
                        exercises.push({
                            id: exerciseInput.value,
                            name: nameElement.textContent.trim(),
                            type: exerciseType,
                            order: index + 1
                        });
                    });
                    
                    sessionExercisesMap.set(sessionNumber, exercises);
                });
                
                // اگر جلسه فعلی تنظیم شده، نمایش به‌روز شود
                if (currentSession) {
                    updateSelectedExercisesDisplay();
                }
            }

            // Exercise filtering and display
            async function filterExercises(subcategoryId) {
                exerciseList.innerHTML = `
            <div class="flex justify-center items-center py-8">
                <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
            </div>
        `;

                try {
                    const response = await fetch(`/train/filter-exercises/?muscle_group=${encodeURIComponent(subcategoryId)}`);
                    if (!response.ok) throw new Error('Network response was not ok');
                    const data = await response.json();
                    const exercises = data.exercises;

                    if (!exercises || exercises.length === 0) {
                        exerciseList.innerHTML = `
                    <div class="text-center py-4 text-gray-500">
                        هیچ حرکتی برای این دسته‌بندی یافت نشد
                    </div>
                `;
                        return;
                    }

                    const groupedExercises = {
                        dumbbell: exercises.filter(ex => ex.category === 'dumbbell'),
                        barbell: exercises.filter(ex => ex.category === 'barbell'),
                        other: exercises.filter(ex => ex.category === 'other')
                    };

                    const container = document.createElement('div');
                    container.className = 'flex flex-row gap-6 nui-heading nui-heading-xl nui-weight-medium nui-lead-normal text-muted-800 dark:text-muted-100 mb-2';
                    ['dumbbell', 'barbell', 'other'].forEach(category => {
                        const exercises = groupedExercises[category];
                        if (!exercises || exercises.length === 0) return;

                        const column = createExerciseColumn(category, exercises);
                        container.appendChild(column);
                    });

                    exerciseList.innerHTML = '';
                    exerciseList.appendChild(container);

                } catch (error) {
                    console.error('Error:', error);
                    exerciseList.innerHTML = `
                <div class="text-center py-4 text-red-500">
                    خطا در بارگذاری حرکات. لطفاً دوباره تلاش کنید.
                </div>
            `;
                }
            }


            function createExerciseElement(exercise) {
                const exerciseDiv = document.createElement('div');
                exerciseDiv.className = 'bg-white rounded-lg border hover:shadow-md transition-all duration-200';

                exerciseDiv.innerHTML = `
        <label class="flex items-center cursor-pointer w-full p-4 gap-4">
            <div class="relative flex-shrink-0">
                <input type="checkbox"
                       class="exercise-checkbox form-checkbox h-6 w-6 text-blue-600 rounded border-gray-300"
                       value="${exercise.id}"
                       data-name="${exercise.name}"
                       data-muscle-group="${exercise.muscle_group}">
            </div>
            <div class="flex-1 min-w-0 flex items-center gap-4">
                <div class="flex-1">
                    <p class="text-base text-right" 
                       style="direction: rtl; 
                              width: 32ch; 
                              text-align: justify; 
                              word-wrap: break-word;
                              line-height: 1.5;
                              margin: 0;
                              padding-left: 1rem;"
                       title="${exercise.name}">
                        ${exercise.name}
                    </p>
                </div>
                ${exercise.gif_url ? `
                    <div class="flex-shrink-0 w-32 h-32">
                        <img src="${exercise.gif_url}"
                             alt="${exercise.name}"
                             class="w-full h-full object-cover rounded"
                             loading="lazy">
                    </div>
                ` : ''}
            </div>
        </label>
    `;

                const checkbox = exerciseDiv.querySelector('.exercise-checkbox');
                checkbox.addEventListener('change', handleCheckboxChange);

                return exerciseDiv;
            }

            function createExerciseColumn(category, exercises) {
                const categoryTitles = {
                    'dumbbell': 'دمبل',
                    'barbell': 'هالتر',
                    'other': 'سیم کش و دستگاه'
                };

                const categoryClasses = {
                    'dumbbell': 'bg-blue-50 border-blue-200',
                    'barbell': 'bg-green-50 border-green-200',
                    'other': 'bg-yellow-50 border-yellow-200'
                };

                const column = document.createElement('div');
                column.className = `flex-1 min-w-[350px] rounded-lg border ${categoryClasses[category]}`;

                column.innerHTML = `
        <div class="mb-4 pt-4 px-4">
            <h3 class="text-lg font-bold text-center">
                ${categoryTitles[category]}
                <span class="text-sm font-normal mr-2">(${exercises.length})</span>
            </h3>
        </div>
        <div class="flex flex-col gap-2 px-4 pb-4">
            <!-- Exercise items will be added here -->
        </div>
    `;

                const exerciseContainer = column.querySelector('.flex-col');
                exercises.forEach(exercise => {
                    const exerciseElement = createExerciseElement(exercise);
                    exerciseContainer.appendChild(exerciseElement);
                });

                return column;
            }

            function handleCheckboxChange(e) {
                const checkbox = e.target;
                const exerciseData = {
                    id: checkbox.value,
                    name: checkbox.dataset.name,
                    muscle_group: checkbox.dataset.muscleGroup
                };

                // Check if the exercise is in the previous training plan when checked
                if (checkbox.checked) {
                    // Check if this exercise exists in the previous plan
                    if (isExerciseInPreviousPlan(exerciseData.id, exerciseData.name)) {
                        // Uncheck temporarily until user confirms
                        checkbox.checked = false;
                        
                        // Show confirmation modal
                        showPreviousPlanConfirmationModal(exerciseData, checkbox);
                        return;
                    }
                    
                    // Not in previous plan, add to selected exercises as normal
                    selectedExercises.push(exerciseData);
                    selectionOrder.push(exerciseData.id);
                } else {
                    // Remove from selected exercises as normal
                    selectedExercises = selectedExercises.filter(ex => ex.id !== exerciseData.id);
                    selectionOrder = selectionOrder.filter(id => id !== exerciseData.id);
                }
                
                updateSupersetButtonState();
            }

            // Function to check if an exercise exists in the previous training plan
            function isExerciseInPreviousPlan(exerciseId, exerciseName) {
                // Get all previous plan exercise items
                const previousExerciseItems = document.querySelectorAll('.exercise-item span');
                
                // Check if any of them contain this exercise name
                for (const item of previousExerciseItems) {
                    const itemText = item.textContent.trim();
                    if (itemText.includes(exerciseName)) {
                        return true;
                    }
                }
                
                return false;
            }

            // Function to show the confirmation modal
            function showPreviousPlanConfirmationModal(exerciseData, checkbox) {
                const modal = document.getElementById('previous-plan-confirmation-modal');
                const messageElement = document.getElementById('confirmation-message');
                
                // Set the message
                messageElement.textContent = `حرکت "${exerciseData.name}" در برنامه قبلی وجود دارد. آیا میخواهید آن را انتخاب کنید؟`;
                
                // Show the modal
                modal.classList.remove('hidden');
                
                // Handle confirm button
                const confirmButton = document.getElementById('confirm-exercise-selection');
                confirmButton.onclick = function() {
                    // Check the checkbox
                    checkbox.checked = true;
                    
                    // Add to selected exercises
                    selectedExercises.push(exerciseData);
                    selectionOrder.push(exerciseData.id);
                    
                    // Update UI
                    updateSupersetButtonState();
                    
                    // Hide modal
                    modal.classList.add('hidden');
                };
                
                // Handle cancel button
                const cancelButton = document.getElementById('cancel-exercise-selection');
                cancelButton.onclick = function() {
                    // Ensure checkbox is unchecked
                    checkbox.checked = false;
                    
                    // Hide modal
                    modal.classList.add('hidden');
                };
                
                // Handle close button
                const closeButton = document.getElementById('close-confirmation-modal');
                closeButton.onclick = function() {
                    // Ensure checkbox is unchecked
                    checkbox.checked = false;
                    
                    // Hide modal
                    modal.classList.add('hidden');
                };
            }

            function updateSupersetButtonState() {
                const supersetButton = document.getElementById('make-superset');
                const trisetButton = document.getElementById('make-triset');
                
                if (supersetButton && trisetButton) {
                    const hasEnoughForSuperset = selectedExercises.length >= 2;
                    const hasEnoughForTriset = selectedExercises.length >= 3;
                    
                    supersetButton.disabled = !hasEnoughForSuperset;
                    trisetButton.disabled = !hasEnoughForTriset;
                    
                    // اضافه کردن کلاس‌های opacity برای حالت disabled
                    supersetButton.classList.toggle('opacity-50', !hasEnoughForSuperset);
                    trisetButton.classList.toggle('opacity-50', !hasEnoughForTriset);
                    
                    // اضافه کردن cursor-not-allowed برای حالت disabled
                    supersetButton.classList.toggle('cursor-not-allowed', !hasEnoughForSuperset);
                    trisetButton.classList.toggle('cursor-not-allowed', !hasEnoughForTriset);
                }
            }

            function createSuperset(exercises) {
                if (exercises.length !== 2) return;

                const [firstExercise, secondExercise] = exercises;
                const formIndex = totalFormsCount;
                const exerciseId = Date.now();
                const sessionExercisesList = document.getElementById(`exercises-list-${currentSession}`);

                const exerciseRow = document.createElement('div');
                exerciseRow.id = `exercise-row-${exerciseId}`;
                exerciseRow.className = 'border rounded p-4 mb-4 nui-heading nui-heading-sm nui-weight-medium nui-lead-normal relative top-0.5 text-xs nui-radio-label-text';

                exerciseRow.innerHTML = `
            <div class="space-y-4">
                <div class="flex items-center space-x-4">
                    <input type="hidden" name="exercise_set-${formIndex}-exercise" value="${firstExercise.id}" data-muscle-group="${firstExercise.muscle_group}">
                    <input type="hidden" name="exercise_set-${formIndex}-session_number" value="${currentSession}">
                    <input type="hidden" name="exercise_set-${formIndex}-is_superset" value="true">
                    <input type="hidden" name="exercise_set-${formIndex}-paired_exercise" value="${secondExercise.id}" data-muscle-group="${secondExercise.muscle_group}">

                    <span class="flex-grow font-medium">
                        ${firstExercise.name}
                        <span class="text-primary-500">+ سوپرست با</span>
                        ${secondExercise.name}
                    </span>

                    ${createCustomSelect(formIndex)}

                    <button type="button" class="text-red-500 hover:text-red-700 delete-exercise">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                    </button>
                </div>
            </div>
        `;

                sessionExercisesList.appendChild(exerciseRow);
                const customSelect = exerciseRow.querySelector('.custom-select');
                initializeCustomSelect(customSelect);
                totalFormsCount++;
                updateTotalForms();
                
                // نمایش اعلان موفقیت
                notificationManager.show(`سوپرست "${firstExercise.name}" و "${secondExercise.name}" با موفقیت ثبت شد و به جلسه اضافه شد`);
            }

            // Form management
            function updateTotalForms() {
                const forms = document.querySelectorAll('[name$="-exercise"]');
                totalFormsCount = forms.length;
                totalFormsInput.value = totalFormsCount;
            }

            function closeModal() {
                // ذخیره حرکات جلسه فعلی قبل از بستن مودال
                saveExercisesToSession();
                
                modal.classList.add('hidden');
                exerciseList.innerHTML = '';
                selectedExercises = [];
                selectionOrder = [];
                document.querySelectorAll('.exercise-checkbox').forEach(checkbox => {
                    checkbox.checked = false;
                });
                // Clear search input
                if (searchInput) {
                    searchInput.value = '';
                }
            }

            function updateSelectionVisualFeedback() {
                document.querySelectorAll('.exercise-checkbox').forEach(checkbox => {
                    const exerciseDiv = checkbox.closest('.bg-white');
                    if (selectedExercises.length > 0) {
                        exerciseDiv.classList.add('border-blue-500');
                        // اضافه کردن tooltip برای حالت سوپرست
                        exerciseDiv.setAttribute('title', 'حالت سوپرست (حداکثر ۲ انتخاب)');
                    } else {
                        exerciseDiv.classList.remove('border-blue-500');
                        exerciseDiv.setAttribute('title', 'حالت چند انتخابی');
                    }
                });
            }

            // Initialize event listeners
            document.querySelectorAll('.add-movement-btn').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    currentSession = this.dataset.session;
                    document.getElementById('modal-session-number').textContent = currentSession;
                    modal.classList.remove('hidden');
                    
                    // بارگذاری حرکات جلسه فعلی
                    loadExercisesFromDOM();
                    updateSelectedExercisesDisplay();
                });
            });

            document.querySelectorAll('.subcategory-btn').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    document.querySelectorAll('.subcategory-btn').forEach(btn => {
                        btn.classList.remove('bg-blue-500', 'text-white');
                        btn.classList.add('bg-gray-200');
                    });
                    this.classList.remove('bg-gray-200');
                    this.classList.add('bg-blue-500', 'text-white');
                    filterExercises(this.dataset.subcategory);
                });
            });

            document.getElementById('close-modal').addEventListener('click', closeModal);
            document.getElementById('cancel-selection').addEventListener('click', function() {
                // پاک کردن همه انتخاب‌ها
                selectedExercises = [];
                selectionOrder = [];
                
                // برداشتن تیک همه چک‌باکس‌ها
                document.querySelectorAll('.exercise-checkbox:checked').forEach(checkbox => {
                    checkbox.checked = false;
                });
                
                updateSupersetButtonState();
            });

            // Delete exercise functionality
            document.addEventListener('click', function (e) {
                if (e.target.closest('.delete-exercise')) {
                    const exerciseRow = e.target.closest('.border.rounded');
                    const sessionContainer = exerciseRow.closest('.session-container');
                    const sessionNumber = sessionContainer.querySelector('.add-movement-btn').dataset.session;
                    
                    // حذف ردیف تمرین
                    exerciseRow.remove();
                    
                    // به‌روزرسانی شماره‌گذاری فرم‌ها
                    const allExerciseRows = document.querySelectorAll('[id^="exercise-row-"]');
                    allExerciseRows.forEach((row, index) => {
                        // به‌روزرسانی نام‌های فیلدها
                        const inputs = row.querySelectorAll('input');
                        inputs.forEach(input => {
                            const name = input.name;
                            if (name) {
                                const newName = name.replace(/exercise_set-\d+/, `exercise_set-${index}`);
                                input.name = newName;
                            }
                        });
                        
                        // به‌روزرسانی شناسه ردیف
                        row.id = `exercise-row-${index}`;
                    });
                    
                    // به‌روزرسانی تعداد کل فرم‌ها
                    updateTotalForms();
                    
                    // بررسی و نمایش وضعیت خالی بودن جلسه
                    const exercisesList = document.getElementById(`exercises-list-${sessionNumber}`);
                    const emptyState = document.getElementById(`empty-state-${sessionNumber}`);
                    
                    if (exercisesList && exercisesList.children.length === 0 && emptyState) {
                        emptyState.style.display = 'flex';
                    }
                    
                    // به‌روزرسانی حرکات این جلسه
                    if (sessionNumber === currentSession) {
                        saveExercisesToSession();
                    }
                }
            });

            // Form submission handling
            document.getElementById('training-plan-form').addEventListener('submit', function (e) {
                e.preventDefault();

                // اضافه کردن لاگ برای بررسی داده‌ها
                const exercises = document.querySelectorAll('[name$="-exercise"]');
                exercises.forEach((exercise, index) => {
                    const exerciseData = {
                        exercise: exercise.value,
                        sets_reps: document.querySelector(`[name="exercise_set-${index}-sets_reps"]`)?.value,
                        session_number: document.querySelector(`[name="exercise_set-${index}-session_number"]`)?.value,
                        exercise_name: exercise.closest('[id^="exercise-row-"]')?.querySelector('.flex-grow.font-medium')?.textContent.trim()
                    };
                    console.log(`Exercise ${index + 1} Data:`, exerciseData);
                });

                // پاک کردن پیام‌های خطای قبلی
                document.querySelectorAll('.error-message').forEach(el => el.remove());
                document.querySelectorAll('.border-red-500').forEach(el => el.classList.remove('border-red-500'));

                const validationErrors = [];

                // بررسی وجود تمرین
                if (exercises.length === 0) {
                    showError('لطفاً حداقل یک تمرین اضافه کنید.');
                    return;
                }

                // بررسی جلسات خالی
                const sessionExercises = {};
                exercises.forEach((exercise, index) => {
                    const sessionNum = document.querySelector(`[name="exercise_set-${index}-session_number"]`)?.value;
                    if (sessionNum) {
                        if (!sessionExercises[sessionNum]) {
                            sessionExercises[sessionNum] = [];
                        }
                        sessionExercises[sessionNum].push(index);
                    }
                });

                let emptySessionFound = false;
                for (let i = 1; i <= parseInt('{{ num_sessions }}'); i++) {
                    if (!sessionExercises[i] || sessionExercises[i].length === 0) {
                        validationErrors.push(`جلسه ${i} خالی است. لطفاً حداقل یک تمرین اضافه کنید.`);
                        emptySessionFound = true;
                    }
                }

                if (emptySessionFound) {
                    showError(validationErrors.join('\n'));
                    return;
                }

                // بررسی دسته‌بندی‌های اصلی
                const missingCategories = validateMainCategories();
                
                if (missingCategories.length > 0) {
                    // بجای اضافه کردن پیام‌های جداگانه برای هر دسته‌بندی
                    // یک پیام واحد با لیست همه دسته‌بندی‌های وارد نشده ایجاد می‌کنیم
                    const categoriesList = missingCategories.map(cat => `- ${cat}`).join('\n');
                    validationErrors.push(`دسته‌بندی‌های زیر وارد نشده است:\n${categoriesList}\n\nلطفاً حداقل یک تمرین از هر دسته‌بندی اصلی انتخاب کنید.`);
                    
                    showError(validationErrors.join('\n'), true); // پارامتر دوم به true تنظیم شد
                    return;
                }

                // بررسی فیلدهای اجباری هر تمرین
                let isValid = true;
                let firstErrorElement = null;
                exercises.forEach((exercise, index) => {
                    const setsReps = document.querySelector(`[name="exercise_set-${index}-sets_reps"]`);
                    const sessionNum = document.querySelector(`[name="exercise_set-${index}-session_number"]`);
                    const exerciseRow = exercise.closest('[id^="exercise-row-"]');
                    const exerciseName = exerciseRow.querySelector('.flex-grow.font-medium').textContent.trim();

                    if (!setsReps?.value) {
                        validationErrors.push(`لطفاً تعداد ست و تکرار را برای تمرین "${exerciseName}" مشخص کنید.`);
                        isValid = false;
                        
                        exerciseRow.classList.add('border-red-500');
                        if (!firstErrorElement) {
                            firstErrorElement = exerciseRow;
                        }
                    }

                    if (!sessionNum?.value) {
                        validationErrors.push(`شماره جلسه برای تمرین "${exerciseName}" مشخص نشده است.`);
                        isValid = false;
                    }
                });

                if (!isValid) {
                    showError(validationErrors.join('\n'));
                    if (firstErrorElement) {
                        firstErrorElement.scrollIntoView({ 
                            behavior: 'smooth', 
                            block: 'center'
                        });
                    }
                    return;
                }

                // اگر همه اعتبارسنجی‌ها موفق بود، فرم را ارسال کن
                this.submit();
            });

            // تابع نمایش خطا
            function showError(message, isMainCategoryError = false) {
                // حذف مودال های قبلی برای جلوگیری از نمایش چندگانه
                const existingModals = document.querySelectorAll('.error-modal-overlay');
                existingModals.forEach(modal => modal.remove());
                
                // ساخت اورلی مودال
                const modalOverlay = document.createElement('div');
                modalOverlay.className = 'error-modal-overlay fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50 backdrop-blur-sm animate-fadeIn';
                
                // تبدیل پیام‌ها به آرایه اگر رشته هستند
                const errorMessages = message.split('\n').filter(msg => msg.trim() !== '');
                
                // ساخت مودال
                modalOverlay.innerHTML = `
                    <div class="error-modal bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-6 max-w-md w-full mx-4 animate-slideIn text-right border-t-4 border-red-500">
                        <div class="flex items-center mb-6">
                            <div class="bg-red-100 dark:bg-red-900/30 p-3 rounded-full ml-3 transform transition-all duration-300 hover:rotate-12">
                                <svg class="w-8 h-8 text-red-600 dark:text-red-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                        </div>
                            <h3 class="text-xl font-bold text-gray-900 dark:text-white">خطا در ثبت برنامه تمرینی</h3>
                    </div>
                        
                        <div class="error-list mt-4 mb-6 max-h-60 overflow-y-auto pr-3 border-r-2 border-red-200 dark:border-red-800">
                            ${errorMessages.length > 1 
                                ? `<ul class="list-disc list-inside space-y-3 text-gray-800 dark:text-gray-100 text-right">
                                    ${errorMessages.map(err => {
                                        // اگر خط شامل "- " باشد، فرمت لیست دارد
                                        if (err.includes('\n- ')) {
                                            // جدا کردن عنوان و آیتم‌های لیست
                                            const [title, ...items] = err.split('\n');
                                            // حذف خط خالی قبل از پیام پایانی
                                            const lastMessage = items.length > 0 && items[items.length-1].trim() === '' 
                                                ? items.pop() : '';
                                            const finalMessage = items.length > 0 && items[items.length-1].startsWith('\n') 
                                                ? items.pop() : '';
                                            
                                            // اگر عنوان شامل "دسته‌بندی‌های زیر وارد نشده است" است، فرمت خاص اعمال کنیم
                                            const isCategoryError = title.includes('دسته‌بندی‌های زیر وارد نشده است');
                                            
                                            return `
                                                <li class="mb-4">
                                                    <p class="font-medium mb-3 text-gray-900 dark:text-white text-lg">${title}</p>
                                                    <ul class="list-none pr-4 space-y-2">
                                                        ${items.map(item => {
                                                            // اگر دسته‌بندی است و با "- " شروع می‌شود
                                                            if (isCategoryError && item.startsWith('- ')) {
                                                                return `<li class="text-sm py-2"><span class="font-bold text-red-600 dark:text-red-400 text-base inline-flex items-center">
                                                                    <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                                                                    </svg>
                                                                    ${item.replace('- ', '')}</span></li>`;
                                                            }
                                                            return `<li class="text-sm text-gray-800 dark:text-gray-200 py-1">${item}</li>`;
                                                        }).join('')}
                                                    </ul>
                                                    ${finalMessage ? `<p class="text-sm mt-3 text-gray-800 dark:text-gray-200">${finalMessage.trim()}</p>` : ''}
                                                </li>
                                            `;
                                        }
                                        return `<li class="text-sm text-gray-800 dark:text-gray-200 py-1">${err}</li>`;
                                    }).join('')}
                                  </ul>`
                                : `<p class="text-gray-800 dark:text-gray-200 text-right whitespace-pre-line">${errorMessages[0]}</p>`
                            }
                        </div>
                        
                        <div class="mt-6 flex ${isMainCategoryError ? 'justify-between' : 'justify-start'} w-full space-x-4 space-x-reverse">
                            <button class="close-error-modal bg-red-600 hover:bg-red-700 text-white py-3 px-6 rounded-xl transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 font-medium shadow-md hover:shadow-lg">
                                بستن
                            </button>
                            ${isMainCategoryError ? `
                            <button class="bypass-validation-btn bg-green-500 hover:bg-green-600 text-white py-3 px-6 rounded-xl transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 flex items-center font-medium shadow-md hover:shadow-lg">
                                <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                ثبت بدون نیاز به تکمیل
                            </button>
                            ` : ''}
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modalOverlay);
                
                // اضافه کردن استایل‌های انیمیشن
                const style = document.createElement('style');
                style.textContent = `
                    @keyframes fadeIn {
                        from { opacity: 0; }
                        to { opacity: 1; }
                    }
                    
                    @keyframes slideIn {
                        from { transform: translateY(-30px); opacity: 0; }
                        to { transform: translateY(0); opacity: 1; }
                    }
                    
                    @keyframes fadeOut {
                        from { opacity: 1; }
                        to { opacity: 0; }
                    }
                    
                    @keyframes slideOut {
                        from { transform: translateY(0); opacity: 1; }
                        to { transform: translateY(20px); opacity: 0; }
                    }
                    
                    .animate-fadeIn {
                        animation: fadeIn 0.3s ease-out forwards;
                    }
                    
                    .animate-slideIn {
                        animation: slideIn 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards;
                    }
                    
                    .animate-fadeOut {
                        animation: fadeOut 0.3s ease-in forwards;
                    }
                    
                    .animate-slideOut {
                        animation: slideOut 0.3s ease-in forwards;
                    }
                `;
                document.body.appendChild(style);
                
                // اضافه کردن کد بستن مودال
                const closeButtons = document.querySelectorAll('.close-error-modal');
                closeButtons.forEach(button => {
                    button.addEventListener('click', function() {
                        const modalOverlay = this.closest('.error-modal-overlay');
                        const modalContent = modalOverlay.querySelector('.error-modal');
                        
                        // افزودن کلاس‌های انیمیشن خروج
                        modalOverlay.classList.add('animate-fadeOut');
                        modalContent.classList.add('animate-slideOut');
                        
                        // حذف مودال پس از اتمام انیمیشن
                setTimeout(() => {
                            modalOverlay.remove();
                        }, 300);
                    });
                });
                
                // اضافه کردن کد دکمه ثبت با همین شرایط
                const bypassButtons = document.querySelectorAll('.bypass-validation-btn');
                bypassButtons.forEach(button => {
                    button.addEventListener('click', function() {
                        const modalOverlay = this.closest('.error-modal-overlay');
                        
                        // انیمیشن خروج
                        modalOverlay.classList.add('animate-fadeOut');
                        modalOverlay.querySelector('.error-modal').classList.add('animate-slideOut');
                        
                        setTimeout(() => {
                            modalOverlay.remove();
                            
                            // ارسال فرم با نادیده گرفتن اعتبارسنجی دسته‌بندی اصلی
                            const form = document.getElementById('training-plan-form');
                            form.setAttribute('data-bypass-main-categories', 'true');
                            form.submit();
                        }, 300);
                    });
                });
            }
            
            // Single exercise selection handler
            document.getElementById('confirm-selection').addEventListener('click', function () {
                const checkboxes = document.querySelectorAll('.exercise-checkbox:checked');
                const selectedExercisesArray = Array.from(checkboxes).map(checkbox => ({
                    id: checkbox.value,
                    name: checkbox.dataset.name,
                    muscle_group: checkbox.dataset.muscleGroup,
                }));

                if (selectedExercisesArray.length === 0) {
                    alert('لطفاً حداقل یک تمرین را انتخاب کنید.');
                    return;
                }

                // اضافه کردن تمرین‌های انتخاب شده
                selectedExercisesArray.forEach(exercise => {
                    addSingleExercise(exercise);
                });
                
                // ذخیره و به‌روزرسانی نمایش حرکات
                saveExercisesToSession();

                // پاک کردن انتخاب‌های فعلی بدون بستن مودال
                checkboxes.forEach(checkbox => {
                    checkbox.checked = false;
                });
                selectedExercises = [];
            });

            function addSingleExercise(exercise) {
                const sessionExercisesList = document.getElementById(`exercises-list-${currentSession}`);
                const emptyState = document.getElementById(`empty-state-${currentSession}`);
                
                // Hide empty state when adding exercise
                if (emptyState) {
                    emptyState.style.display = 'none';
                }

                const formIndex = totalFormsCount;
                const exerciseId = Date.now() + Math.random();

                // Format the name consistently
                const formattedName = exercise.name
                    .split(/[\n\r]+/)
                    .map(part => part.trim())
                    .filter(Boolean)
                    .join(' ')
                    .replace(/\s+/g, ' ')
                    .trim();

                const exerciseRow = document.createElement('div');
                exerciseRow.id = `exercise-row-${exerciseId}`;
                exerciseRow.className = 'border rounded p-4 mb-4 nui-heading nui-heading-sm nui-weight-medium nui-lead-normal relative top-0.5 text-xs nui-radio-label-text';

                exerciseRow.innerHTML = `
    <div class="space-y-4">
      <div class="flex items-center space-x-4">
        <input type="hidden" name="exercise_set-${formIndex}-exercise" value="${exercise.id}" data-muscle-group="${exercise.muscle_group}">
        <input type="hidden" name="exercise_set-${formIndex}-session_number" value="${currentSession}">
        <input type="hidden" name="exercise_set-${formIndex}-is_superset" value="false">
        <input type="hidden" name="exercise_set-${formIndex}-paired_exercise" value="">
        <input type="hidden" name="exercise_set-${formIndex}-paired_superset" value="">
        <input type="hidden" name="exercise_set-${formIndex}-is_double_superset" value="false">
        <button type="button" class="text-red-500 hover:text-red-700 delete-exercise">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
          </svg>
        </button>
        <span class="flex-grow font-medium whitespace-normal">${formattedName}</span>
        ${createCustomSelect(formIndex)}
      </div>
    </div>
  `;

                const customSelect = exerciseRow.querySelector('.custom-select');
                initializeCustomSelect(customSelect);

                sessionExercisesList.appendChild(exerciseRow);
                totalFormsCount++;
                updateTotalForms();
                
                // نمایش اعلان موفقیت
                notificationManager.show(`حرکت "${formattedName}" با موفقیت ثبت شد و به جلسه اضافه شد`);
            }

            // اضافه کردن event listener برای دکمه تری ست
            document.getElementById('make-triset').addEventListener('click', function() {
                if (selectedExercises.length >= 3) {
                    // گرفتن سه حرکت آخر برای تری ست
                    const lastThreeIds = selectionOrder.slice(-3);
                    const lastThreeExercises = selectedExercises.filter(ex => 
                        lastThreeIds.includes(ex.id)
                    ).sort((a, b) => 
                        selectionOrder.indexOf(a.id) - selectionOrder.indexOf(b.id)
                    );

                    // گرفتن حرکت‌های باقیمانده به عنوان حرکت‌های تکی
                    const remainingExercises = selectedExercises.filter(ex => 
                        !lastThreeIds.includes(ex.id)
                    ).sort((a, b) => 
                        selectionOrder.indexOf(a.id) - selectionOrder.indexOf(b.id)
                    );

                    // اول اضافه کردن حرکت‌های تکی
                    remainingExercises.forEach(exercise => {
                        addSingleExercise(exercise);
                    });

                    // سپس اضافه کردن تری ست
                    const [firstExercise, secondExercise, thirdExercise] = lastThreeExercises;
                    const formIndex = totalFormsCount;
                    const exerciseId = Date.now();
                    const sessionExercisesList = document.getElementById(`exercises-list-${currentSession}`);

                    const exerciseRow = document.createElement('div');
                    exerciseRow.id = `exercise-row-${exerciseId}`;
                    exerciseRow.className = 'border rounded p-4 mb-4 nui-heading nui-heading-sm nui-weight-medium nui-lead-normal relative top-0.5 text-xs nui-radio-label-text';

                    exerciseRow.innerHTML = `
                        <div class="space-y-4">
                            <div class="flex items-center space-x-4">
                                <input type="hidden" name="exercise_set-${formIndex}-exercise" value="${firstExercise.id}" data-muscle-group="${firstExercise.muscle_group}">
                                <input type="hidden" name="exercise_set-${formIndex}-session_number" value="${currentSession}">
                                <input type="hidden" name="exercise_set-${formIndex}-is_superset" value="true">
                                <input type="hidden" name="exercise_set-${formIndex}-paired_exercise" value="${secondExercise.id}" data-muscle-group="${secondExercise.muscle_group}">
                                <input type="hidden" name="exercise_set-${formIndex}-paired_superset" value="${thirdExercise.id}" data-muscle-group="${thirdExercise.muscle_group}">
                                <button type="button" class="text-red-500 hover:text-red-700 delete-exercise">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                    </svg>
                                </button>
                                <span class="flex-grow font-medium">
                                    ${firstExercise.name}
                                    <span class="text-purple-500">+ تری ست با</span>
                                    ${secondExercise.name}
                                    <span class="text-purple-500">+</span>
                                    ${thirdExercise.name}
                                </span>
                                ${createCustomSelect(formIndex)}
                            </div>
                        </div>
                    `;

                    sessionExercisesList.appendChild(exerciseRow);
                    const customSelect = exerciseRow.querySelector('.custom-select');
                    initializeCustomSelect(customSelect);
                    totalFormsCount++;
                    updateTotalForms();
                    
                    // ذخیره و به‌روزرسانی نمایش حرکات
                    saveExercisesToSession();
                    
                    // پاک کردن همه انتخاب‌ها
                    selectedExercises = [];
                    selectionOrder = [];
                    
                    // برداشتن تیک همه چک‌باکس‌ها
                    document.querySelectorAll('.exercise-checkbox:checked').forEach(checkbox => {
                        checkbox.checked = false;
                    });

                    updateSupersetButtonState();
                    
                    // نمایش اعلان موفقیت
                    notificationManager.show(`تری‌ست "${lastThreeExercises[0].name}"، "${lastThreeExercises[1].name}" و "${lastThreeExercises[2].name}" با موفقیت ثبت شد و به جلسه اضافه شد`);
                } else {
                    alert('لطفاً حداقل سه حرکت را انتخاب کنید.');
                }
            });

            // تغییر در event listener دکمه make-superset
            document.getElementById('make-superset').addEventListener('click', function() {
                if (selectedExercises.length >= 2) {
                    // گرفتن دو حرکت آخر برای سوپرست
                    const lastTwoIds = selectionOrder.slice(-2);
                    const lastTwoExercises = selectedExercises.filter(ex => 
                        lastTwoIds.includes(ex.id)
                    ).sort((a, b) => 
                        selectionOrder.indexOf(a.id) - selectionOrder.indexOf(b.id)
                    );

                    // گرفتن حرکت‌های باقیمانده به عنوان حرکت‌های تکی
                    const remainingExercises = selectedExercises.filter(ex => 
                        !lastTwoIds.includes(ex.id)
                    ).sort((a, b) => 
                        selectionOrder.indexOf(a.id) - selectionOrder.indexOf(b.id)
                    );

                    // اول اضافه کردن حرکت‌های تکی
                    remainingExercises.forEach(exercise => {
                        addSingleExercise(exercise);
                    });

                    // سپس اضافه کردن سوپرست
                    const [firstExercise, secondExercise] = lastTwoExercises;
                    const formIndex = totalFormsCount;
                    const exerciseId = Date.now();
                    const sessionExercisesList = document.getElementById(`exercises-list-${currentSession}`);

                    const exerciseRow = document.createElement('div');
                    exerciseRow.id = `exercise-row-${exerciseId}`;
                    exerciseRow.className = 'border rounded p-4 mb-4 nui-heading nui-heading-sm nui-weight-medium nui-lead-normal relative top-0.5 text-xs nui-radio-label-text';

                    exerciseRow.innerHTML = `
                        <div class="space-y-4">
                            <div class="flex items-center space-x-4">
                                <input type="hidden" name="exercise_set-${formIndex}-exercise" value="${firstExercise.id}">
                                <input type="hidden" name="exercise_set-${formIndex}-session_number" value="${currentSession}">
                                <input type="hidden" name="exercise_set-${formIndex}-is_superset" value="true">
                                <input type="hidden" name="exercise_set-${formIndex}-paired_exercise" value="${secondExercise.id}">
                                <button type="button" class="text-red-500 hover:text-red-700 delete-exercise">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                    </svg>
                                </button>
                                <span class="flex-grow font-medium">
                                    ${firstExercise.name}
                                    <span class="text-primary-500">+ سوپرست با</span>
                                    ${secondExercise.name}
                                </span>
                                ${createCustomSelect(formIndex)}
                            </div>
                        </div>
                    `;

                    sessionExercisesList.appendChild(exerciseRow);
                    const customSelect = exerciseRow.querySelector('.custom-select');
                    initializeCustomSelect(customSelect);
                    totalFormsCount++;
                    updateTotalForms();
                    
                    // ذخیره و به‌روزرسانی نمایش حرکات
                    saveExercisesToSession();
                    
                    // پاک کردن همه انتخاب‌ها
                    selectedExercises = [];
                    selectionOrder = [];
                    
                    // برداشتن تیک همه چک‌باکس‌ها
                    document.querySelectorAll('.exercise-checkbox:checked').forEach(checkbox => {
                        checkbox.checked = false;
                    });

                    updateSupersetButtonState();
                    
                    // نمایش اعلان موفقیت
                    notificationManager.show(`سوپرست "${firstExercise.name}" و "${secondExercise.name}" با موفقیت ثبت شد و به جلسه اضافه شد`);
                } else {
                    alert('لطفاً حداقل دو حرکت را انتخاب کنید.');
                }
            });

            // اضافه کردن event listener برای دکمه finish-and-close
            document.getElementById('finish-and-close').addEventListener('click', function() {
                closeModal();
            });

            // Initialize form
            updateTotalForms();
            
            // بارگذاری اولیه حرکات تمام جلسات
            loadExercisesFromDOM();
        });

        function createCustomSelect(formIndex) {
            const selectHtml = `
    <div class="custom-select-wrapper">
      <div class="custom-select border rounded p-1 nui-select" tabindex="0">
        <input type="hidden" name="exercise_set-${formIndex}-sets_reps" required>
        <div class="selected-option p-2">ست و تکرار</div>
        <div class="custom-select-dropdown">
          {% for value, label in SETS_CHOICES %}
            <div class="custom-select-option" data-value="{{ value }}">{{ label }}</div>
          {% endfor %}
        </div>
      </div>
    </div>
  `;

            return selectHtml;
        }

        function initializeCustomSelect(selectElement) {
            const selectedOption = selectElement.querySelector('.selected-option');
            const dropdown = selectElement.querySelector('.custom-select-dropdown');
            const hiddenInput = selectElement.querySelector('input[type="hidden"]');

            selectElement.addEventListener('click', (e) => {
                e.stopPropagation();
                dropdown.classList.toggle('show');
            });

            selectElement.querySelectorAll('.custom-select-option').forEach(option => {
                option.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const value = option.dataset.value;
                    const text = option.textContent;
                    selectedOption.textContent = text;
                    hiddenInput.value = value;
                    dropdown.classList.remove('show');
                });
            });

            document.addEventListener('click', () => {
                dropdown.classList.remove('show');
            });
        }

        // =================== افزودن رفتارهای جستجوی پیشرفته ===================

        // تنظیمات و متغیرهای اصلی
        const config = {
            modalId: 'exercise-modal',
            searchInputId: 'exercise-search',
            exerciseListId: 'exercise-list',
            validInputTypes: ['text', 'textarea', 'search'],
            keyboardTriggerDelay: 300, // میلی‌ثانیه
        };

        // کلاس اصلی مدیریت جستجو
        class AdvancedSearchManager {
            constructor(config) {
                this.modal = document.getElementById(config.modalId);
                this.searchInput = document.getElementById(config.searchInputId);
                this.exerciseList = document.getElementById(config.exerciseListId);
                this.config = config;
                this.setupEventListeners();
            }

            setupEventListeners() {
                // شنونده کلید در کل صفحه
                document.addEventListener('keydown', (e) => this.handleGlobalKeyPress(e));
                
                // شنونده کلید ESC
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape') {
                        this.closeModal();
                    }
                });

                // مدیریت انتخاب چک‌باکس‌ها
                document.addEventListener('change', (e) => {
                    if (e.target.matches('.exercise-checkbox')) {
                        this.handleCheckboxSelection();
                    }
                });
            }

            handleGlobalKeyPress(e) {
                // بررسی اینکه آیا کاربر در حال تایپ در فیلد ورودی دیگری است
                if (this.isTypingInOtherInput(e.target)) {
                    return;
                }

                // بررسی کلید فشرده شده (حروف فارسی، انگلیسی و اعداد)
                const isPersianLetter = /[\u0600-\u06FF]/.test(e.key);
                const isEnglishLetter = /^[a-zA-Z]$/.test(e.key);
                const isNumber = /^[0-9]$/.test(e.key);

                if (isPersianLetter || isEnglishLetter || isNumber) {
                    e.preventDefault();
                    this.openModalWithKey(e.key);
                }
            }

            isTypingInOtherInput(target) {
                return (
                    target.tagName === 'INPUT' &&
                    this.config.validInputTypes.includes(target.type.toLowerCase()) ||
                    target.tagName === 'TEXTAREA'
                );
            }

            openModalWithKey(key) {
                // نمایش مودال
                this.modal.classList.remove('hidden');
                
                // تمرکز روی فیلد جستجو و وارد کردن کلید
                setTimeout(() => {
                    this.searchInput.focus();
                    this.searchInput.value = key;
                    // شبیه‌سازی رویداد input برای فیلتر کردن نتایج
                    this.searchInput.dispatchEvent(new Event('input'));
                }, this.config.keyboardTriggerDelay);
            }

            handleCheckboxSelection() {
                // پاک کردن فیلد جستجو
                this.searchInput.value = '';
                
                // تمرکز مجدد روی فیلد جستجو با تاخیر کوتاه
                setTimeout(() => {
                    this.searchInput.focus();
                    // به‌روزرسانی نتایج جستجو
                    this.searchInput.dispatchEvent(new Event('input'));
                }, 100);
            }

            closeModal() {
                this.modal.classList.add('hidden');
                this.searchInput.value = '';
            }
        }

        // راه‌اندازی مدیریت جستجوی پیشرفته
        document.addEventListener('DOMContentLoaded', () => {
            const searchManager = new AdvancedSearchManager(config);
        });

        // تابع اعتبارسنجی و ارسال فرم
        function validateAndSubmitForm() {
            // پاک کردن پیام‌های خطای قبلی
            document.querySelectorAll('.error-message').forEach(el => el.remove());
            document.querySelectorAll('.border-red-500').forEach(el => el.classList.remove('border-red-500'));

            const exercises = document.querySelectorAll('[name$="-exercise"]');
            const validationErrors = [];

            // بررسی وجود تمرین
            if (exercises.length === 0) {
                showError('لطفاً حداقل یک تمرین اضافه کنید.');
                return false;
            }

            // بررسی جلسات خالی
            const sessionExercises = {};
            exercises.forEach((exercise, index) => {
                const sessionNum = document.querySelector(`[name="exercise_set-${index}-session_number"]`)?.value;
                if (sessionNum) {
                    if (!sessionExercises[sessionNum]) {
                        sessionExercises[sessionNum] = [];
                    }
                    sessionExercises[sessionNum].push(index);
                }
            });

            let emptySessionFound = false;
            const numSessions = parseInt(document.querySelector('[name="exercise_set-TOTAL_FORMS"]').value) || 0;
            
            for (let i = 1; i <= numSessions; i++) {
                if (!sessionExercises[i] || sessionExercises[i].length === 0) {
                    validationErrors.push(`جلسه ${i} خالی است. لطفاً حداقل یک تمرین اضافه کنید.`);
                    emptySessionFound = true;
                }
            }

            if (emptySessionFound) {
                showError(validationErrors.join('\n'));
                return false;
            }

            // بررسی دسته‌بندی‌های اصلی
            const missingCategories = validateMainCategories();
            
            if (missingCategories.length > 0) {
                // بجای اضافه کردن پیام‌های جداگانه برای هر دسته‌بندی
                // یک پیام واحد با لیست همه دسته‌بندی‌های وارد نشده ایجاد می‌کنیم
                const categoriesList = missingCategories.map(cat => `- ${cat}`).join('\n');
                validationErrors.push(`دسته‌بندی‌های زیر وارد نشده است:\n${categoriesList}\n\nلطفاً حداقل یک تمرین از هر دسته‌بندی اصلی انتخاب کنید.`);
                
                showError(validationErrors.join('\n'), true); // پارامتر دوم به true تنظیم شد
                return false;
            }

            // بررسی فیلدهای اجباری هر تمرین
            let isValid = true;
            let firstErrorElement = null;
            exercises.forEach((exercise, index) => {
                const setsReps = document.querySelector(`[name="exercise_set-${index}-sets_reps"]`);
                const sessionNum = document.querySelector(`[name="exercise_set-${index}-session_number"]`);
                const exerciseRow = exercise.closest('[id^="exercise-row-"]');
                const exerciseName = exerciseRow.querySelector('.flex-grow.font-medium').textContent.trim();

                if (!setsReps?.value) {
                    validationErrors.push(`لطفاً تعداد ست و تکرار را برای تمرین "${exerciseName}" مشخص کنید.`);
                    isValid = false;
                    
                    exerciseRow.classList.add('border-red-500');
                    if (!firstErrorElement) {
                        firstErrorElement = exerciseRow;
                    }
                }

                if (!sessionNum?.value) {
                    validationErrors.push(`شماره جلسه برای تمرین "${exerciseName}" مشخص نشده است.`);
                    isValid = false;
                }
            });

            if (!isValid) {
                showError(validationErrors.join('\n'));
                if (firstErrorElement) {
                    firstErrorElement.scrollIntoView({ 
                        behavior: 'smooth', 
                        block: 'center'
                    });
                }
                return false;
            }

            // نمایش لودینگ
            const saveButton = document.getElementById('save-training-plan-btn');
            const originalContent = saveButton.innerHTML;
            saveButton.innerHTML = `
                <svg class="animate-spin h-8 w-8 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span>در حال ذخیره...</span>
            `;
            saveButton.disabled = true;
            
            // ارسال فرم با تاخیر کوتاه برای نمایش لودینگ
            setTimeout(() => {
                document.getElementById('training-plan-form').submit();
            }, 300);
            
            return false; // جلوگیری از ارسال معمولی فرم
        }

        // تابع اعتبارسنجی دسته‌بندی‌های اصلی
        function validateMainCategories() {
            const mainCategories = {
                'chest': { name: 'سینه', exists: false, priority: 1 },
                'triceps': { name: 'پشت بازو', exists: false, priority: 1 },
                'biceps': { name: 'جلو بازو', exists: false, priority: 5 },  // Requested by user
                'shoulders': { name: 'سرشانه', exists: false, priority: 5 },  // Requested by user
                'back': { name: 'زیربغل', exists: false, priority: 5 },  // Requested by user
                'legs': { name: 'پا', exists: false, priority: 5 }  // Requested by user
            };
            
            // بررسی حرکات اصلی
            document.querySelectorAll('input[name$="-exercise"]').forEach(input => {
                const muscleGroup = input.getAttribute('data-muscle-group');
                if (muscleGroup && mainCategories[muscleGroup]) {
                    mainCategories[muscleGroup].exists = true;
                }
            });
            
            // بررسی حرکات سوپرست و تری‌ست
            document.querySelectorAll('input[name$="-paired_exercise"], input[name$="-paired_superset"]').forEach(input => {
                const muscleGroup = input.getAttribute('data-muscle-group');
                if (input.value && muscleGroup && mainCategories[muscleGroup]) {
                    mainCategories[muscleGroup].exists = true;
                }
            });
            
            // بررسی آیا همه دسته‌بندی‌های اصلی حداقل یک حرکت دارند
            const missingCategories = [];
            
            // اول دسته‌های با اولویت بالاتر را اضافه کنیم
            const prioritizedCategories = Object.values(mainCategories).sort((a, b) => b.priority - a.priority);
            
            prioritizedCategories.forEach(category => {
                if (!category.exists) {
                    missingCategories.push(category.name);
                }
            });
            
            return missingCategories;
        }
    </script>
    <style>
        .exercise-checkbox:checked + div {
            background-color: #f0f9ff; /* Light blue background for selected items */
            border-color: #3b82f6; /* Blue border for selected items */
        }

        #exercise-search {
            transition: all 0.2s ease;
        }

        #exercise-search:focus {
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5); /* Blue focus ring */
            border-color: #3b82f6;
        }

        mark {
            background-color: #fef08a;
            color: #1f2937;
        }
        .custom-select-wrapper {
            position: relative;
            min-width: 180px; /* افزایش عرض پایه */
        }

        .custom-select {
            position: relative;
            width: 100%;
        }

        .selected-option {
            font-size: 1rem; /* افزایش سایز فونت */
            padding: 0.75rem 1rem; /* افزایش پدینگ */
            background: white;
            border-radius: 0.375rem;
            cursor: pointer;
        }

        .custom-select-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            z-index: 1000;
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 0.375rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            max-height: 300px; /* افزایش ارتفاع */
            overflow-y: auto;
            display: none;
            padding: 0.5rem 0;
        }

        .custom-select-dropdown.show {
            display: block;
        }

        .custom-select-option {
            padding: 0.75rem 1.25rem; /* افزایش پدینگ */
            cursor: pointer;
            text-align: right;
            font-size: 1rem; /* افزایش سایز فونت */
            transition: all 0.2s ease;
        }

        .custom-select-option:hover {
            background-color: #6366f1; /* رنگ hover به بنفش */
            color: white;
        }

        .custom-select-option.selected {
            background-color: #4f46e5; /* رنگ انتخاب شده به بنفش تیره */
            color: white;
        }

        /* استایل‌های مربوط به نمایش خطا */
        .border-red-500 {
            border-color: #ef4444 !important;
            box-shadow: 0 0 0 1px #ef4444;
        }

        .error-message {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            animation: fadeIn 0.3s ease-in-out;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* انیمیشن اسکرول */
        html {
            scroll-behavior: smooth;
        }

        /* استایل‌های جدید برای دسته‌بندی‌ها */
        .category-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            padding: 1.5rem;
        }

        .category-card {
            background: white;
            border-radius: 1rem;
            padding: 1.5rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            transition: all 0.3s ease;
        }

        .category-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        .subcategory-btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            padding: 1.25rem 2rem;
            font-size: 1.25rem;
            font-weight: 600;
            color: #4B5563;
            background-color: #F3F4F6;
            border: 2px solid #E5E7EB;
            border-radius: 0.75rem;
            transition: all 0.2s ease;
            cursor: pointer;
            margin-bottom: 0.75rem;
        }

        .subcategory-btn:last-child {
            margin-bottom: 0;
        }

        .subcategory-btn:hover {
            background-color: #E5E7EB;
            border-color: #D1D5DB;
            color: #1F2937;
        }

        .subcategory-btn.active {
            background-color: #4F46E5;
            border-color: #4F46E5;
            color: white;
        }

        .category-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1F2937;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #E5E7EB;
        }

        /* انیمیشن‌های تعاملی */
        @keyframes buttonPress {
            0% { transform: scale(1); }
            50% { transform: scale(0.98); }
            100% { transform: scale(1); }
        }

        .subcategory-btn:active {
            animation: buttonPress 0.2s ease;
        }

        /* بهبود فاصله‌گذاری و سلسله مراتب بصری */
        .category-section {
            margin: 2rem 0;
        }

        .category-section:first-child {
            margin-top: 0;
        }

        .category-section:last-child {
            margin-bottom: 0;
        }
        
        /* استایل‌های بخش نمایش حرکات انتخاب شده */
        .exercise-badge {
            display: inline-flex;
            align-items: center;
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 0.9rem;
            font-weight: 500;
            max-width: none;
            transition: all 0.2s ease-in-out;
            cursor: default;
            white-space: normal;
            overflow: visible;
            gap: 6px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            line-height: 1.4;
        }
        
        .exercise-badge .badge-number {
            background-color: rgba(255, 255, 255, 0.65);
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: 700;
            margin-left: 3px;
            flex-shrink: 0;
            box-shadow: inset 0 0 0 1px rgba(0,0,0,0.1);
        }
        
        .exercise-badge .badge-text {
            white-space: normal;
            overflow: visible;
            word-break: break-word;
            max-width: 100%;
        }
        
        .exercise-badge:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        /* رنگ‌های مختلف برای انواع حرکات */
        .exercise-badge.regular {
            background-color: #dbeafe;
            color: #1e40af;
            border: 1px solid #bfdbfe;
        }
        
        .exercise-badge.superset {
            background-color: #e9d5ff;
            color: #6d28d9;
            border: 1px solid #ddd6fe;
        }
        
        .exercise-badge.triset {
            background-color: #fce7f3;
            color: #be185d;
            border: 1px solid #fbcfe8;
        }
        
        #selected-exercises-list {
            scrollbar-width: thin;
            scrollbar-color: #cbd5e1 #f1f5f9;
        }
        
        #selected-exercises-list::-webkit-scrollbar {
            width: 6px;
            height: 6px;
        }
        
        #selected-exercises-list::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 4px;
        }
        
        #selected-exercises-list::-webkit-scrollbar-thumb {
            background-color: #cbd5e1;
            border-radius: 4px;
        }
    </style>
    <script src="{% static 'js/page-leave-confirmation.js' %}"></script>
    <script src="{% static 'js/notification.js' %}"></script>

    <!-- Add the confirmation modal HTML right after existing modals -->
    <!-- ... existing code ... -->

    <!-- Confirmation Modal for Exercises in Previous Training Plan -->
    <div id="previous-plan-confirmation-modal" class="fixed inset-0 z-50 overflow-auto bg-black bg-opacity-40 hidden flex justify-center items-center">
        <div class="bg-white rounded-lg p-6 mx-4 max-w-md w-full text-right" style="direction: rtl;">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium">تایید انتخاب حرکت</h3>
                <button id="close-confirmation-modal" class="text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div class="mb-4">
                <p id="confirmation-message" class="text-gray-700"></p>
            </div>
            <div class="flex justify-end gap-2">
                <button id="cancel-exercise-selection" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded">
                    انصراف
                </button>
                <button id="confirm-exercise-selection" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    تایید
                </button>
            </div>
        </div>
    </div>

    <!-- ... existing code ... -->

    <!-- Within your JavaScript, add these variables and functions -->
    <script>
    // ... existing code ...

    function handleCheckboxChange(e) {
        const checkbox = e.target;
        const exerciseData = {
            id: checkbox.value,
            name: checkbox.dataset.name,
            muscle_group: checkbox.dataset.muscleGroup
        };

        // Check if the exercise is in the previous training plan when checked
        if (checkbox.checked) {
            // Check if this exercise exists in the previous plan
            if (isExerciseInPreviousPlan(exerciseData.id, exerciseData.name)) {
                // Uncheck temporarily until user confirms
                checkbox.checked = false;
                
                // Show confirmation modal
                showPreviousPlanConfirmationModal(exerciseData, checkbox);
                return;
            }
            
            // Not in previous plan, add to selected exercises as normal
            selectedExercises.push(exerciseData);
            selectionOrder.push(exerciseData.id);
        } else {
            // Remove from selected exercises as normal
            selectedExercises = selectedExercises.filter(ex => ex.id !== exerciseData.id);
            selectionOrder = selectionOrder.filter(id => id !== exerciseData.id);
        }
        
        updateSupersetButtonState();
    }

    // Function to check if an exercise exists in the previous training plan
    function isExerciseInPreviousPlan(exerciseId, exerciseName) {
        // Get all previous plan exercise items
        const previousExerciseItems = document.querySelectorAll('.exercise-item span');
        
        // Check if any of them contain this exercise name
        for (const item of previousExerciseItems) {
            const itemText = item.textContent.trim();
            if (itemText.includes(exerciseName)) {
                return true;
            }
        }
        
        return false;
    }

    // Function to show the confirmation modal
    function showPreviousPlanConfirmationModal(exerciseData, checkbox) {
        const modal = document.getElementById('previous-plan-confirmation-modal');
        const messageElement = document.getElementById('confirmation-message');
        
        // Set the message
        messageElement.textContent = `حرکت "${exerciseData.name}" در برنامه قبلی وجود دارد. آیا میخواهید آن را انتخاب کنید؟`;
        
        // Show the modal
        modal.classList.remove('hidden');
        
        // Handle confirm button
        const confirmButton = document.getElementById('confirm-exercise-selection');
        confirmButton.onclick = function() {
            // Check the checkbox
            checkbox.checked = true;
            
            // Add to selected exercises
            selectedExercises.push(exerciseData);
            selectionOrder.push(exerciseData.id);
            
            // Update UI
            updateSupersetButtonState();
            
            // Hide modal
            modal.classList.add('hidden');
        };
        
        // Handle cancel button
        const cancelButton = document.getElementById('cancel-exercise-selection');
        cancelButton.onclick = function() {
            // Ensure checkbox is unchecked
            checkbox.checked = false;
            
            // Hide modal
            modal.classList.add('hidden');
        };
        
        // Handle close button
        const closeButton = document.getElementById('close-confirmation-modal');
        closeButton.onclick = function() {
            // Ensure checkbox is unchecked
            checkbox.checked = false;
            
            // Hide modal
            modal.classList.add('hidden');
        };
    }

    // Add event listeners for modal outside the function definitions
    document.addEventListener('DOMContentLoaded', function() {
        // ... existing event listeners ...
        
        // Add event listeners for confirmation modal
        document.getElementById('close-confirmation-modal').addEventListener('click', function() {
            document.getElementById('previous-plan-confirmation-modal').classList.add('hidden');
        });
        
        // Close modal if clicked outside
        document.getElementById('previous-plan-confirmation-modal').addEventListener('click', function(e) {
            if (e.target === this) {
                this.classList.add('hidden');
            }
        });
    });

    // ... existing code ...
    </script>
{% endblock %}
